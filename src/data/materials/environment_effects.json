{
  "shader": {
    "vertex": "void main() {vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );gl_Position = projectionMatrix * mvPosition;}",
    "fragment": "uniform vec2 u_resolution;uniform vec2 u_pointer;uniform float u_time;void main(){vec2 uv = gl_FragCoord.xy / u_resolution.xy - .5;uv.y *= u_resolution.y / u_resolution.x;vec3 dir = vec3(uv * 0.4, 1.);float a2 = u_time * 20. + .5;float a1 = 0.0;mat2 rot1 = mat2(cos(a1), sin(a1), - sin(a1), cos(a1));mat2 rot2 = rot1;dir.xz *= rot1;dir.xy *= rot2;vec3 from = vec3(0., 0., 0.);from += vec3(.0025 * u_time, .03 * u_time, - 2.);from.xz *= rot1;from.xy *= rot2;float s = .1, fade = .07;vec3 v = vec3(0.4);for(int r = 0;r < 12;r ++){vec3 p = from + s * dir * 1.5;p = abs(vec3(0.750) - mod(p, vec3(0.750 * 2.)));p.x += float(r * r) * 0.01;p.y += float(r) * 0.02;float pa, a = pa = 0.;for(int i = 0;i < 15;i ++){p = abs(p) / dot(p, p) - 0.340;a += abs(length(p) - pa * 0.2);pa = length(p);}a *= a * a * 2.;v += vec3(s, s * s, s * s * s * s) * a * 0.0017 * fade;fade *= 0.960;s += 0.110;}v = mix(vec3(length(v)), v, 0.8);gl_FragColor = vec4(v * .01, 1.);}"
  }
}