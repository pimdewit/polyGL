{
  "name": "Red",
  "shader": {
    "vertex": "uniform vec2 uvScale;varying vec2 vUv;void main() {vUv = uvScale * uv;vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );gl_Position = projectionMatrix * mvPosition;}",
    "fragment": "uniform vec2 u_resolution;uniform vec2 u_cursor;uniform float u_time;varying vec2 vUv;float random (in float x) {return fract(sin(x)*1e4);}float random (in vec2 st) { return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);}float pattern(vec2 st, vec2 v, float t) {vec2 p = floor(st+v);return step(t, random(0.1+p*.000001)+random(p.x)*0.5 );}void main() {vec2 position = -1.0 + 2.0 * vUv; vec2 st = gl_FragCoord.xy/u_resolution.xy;st.x *= u_resolution.x/u_resolution.y;vec2 grid = vec2(100.0,2.);st *= grid;vec2 ipos = floor(st);vec2 fpos = fract(st);vec2 vel = vec2(u_time*2.*max(grid.x,grid.y));vel *= vec2(-1.,0.0) * random(1.0+ipos.y);vec2 offset = vec2(0.4,0.);vec3 color = vec3(0.);color.r = pattern(st+offset,vel,0.5+u_cursor.x/u_resolution.x);color.g = pattern(st,vel,0.5+u_cursor.x/u_resolution.x);color.b = pattern(st-offset,vel,0.5+u_cursor.x/u_resolution.x);color *= step(0.0,fpos.y);gl_FragColor = vec4(1.0-color,1.0);}"
  },
  "price": "25"
}